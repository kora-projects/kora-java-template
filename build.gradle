plugins {
    id "java"
    id "jacoco"
    id "application"

    id "com.diffplug.spotless" version "6.19.0"
}

group = groupId
version = koraVersion

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven { url "https://central.sonatype.com/repository/maven-snapshots" }
}

configurations {
    koraBom
    annotationProcessor.extendsFrom(koraBom)
    compileOnly.extendsFrom(koraBom)
    implementation.extendsFrom(koraBom)
    api.extendsFrom(koraBom)
    testImplementation.extendsFrom(koraBom)
    testAnnotationProcessor.extendsFrom(koraBom)
}

dependencies {
    koraBom platform("ru.tinkoff.kora:kora-parent:$koraVersion")
    annotationProcessor "ru.tinkoff.kora:annotation-processors"

    implementation "ru.tinkoff.kora:http-server-undertow"
    implementation "ru.tinkoff.kora:config-hocon"
    implementation "ru.tinkoff.kora:logging-logback"

    testImplementation "org.mockito:mockito-core:5.18.0"
    testImplementation "ru.tinkoff.kora:test-junit5"
    testImplementation "org.testcontainers:junit-jupiter:1.19.8"
}

application {
    applicationName = "application"
    mainClass = "ru.tinkoff.kora.java.Application"
    applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "": "",
    ])
}

distTar {
    archiveFileName = "application.tar"
}

test {
    dependsOn tasks.distTar

    jvmArgs += [
            "-XX:+TieredCompilation",
            "-XX:TieredStopAtLevel=1",
    ]

    environment([
            "": ""
    ])

    useJUnitPlatform()
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    exclude("**/\$*")

    jacoco {
        excludes += ["**/generated/**", "**/Application*", "**/\$*"]
    }

    reports {
        html.required = false
        junitXml.required = false
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
    classDirectories = files(classDirectories.files.collect { fileTree(dir: it, excludes: test.jacoco.excludes) })
}

compileJava {
    options.encoding("UTF-8")
    options.incremental(true)
    options.fork = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse("4.21").configFile("${rootDir}/config/codestyle.xml")
        targetExclude("**/proto/**", "**/generated/openapi/**", "**/generated/soap/**", "**/generated/grpc/**",)
    }
}
